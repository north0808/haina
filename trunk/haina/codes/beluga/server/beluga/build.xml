<?xml version="1.0" encoding="UTF-8"?>
<project name="beluga" basedir="." default="compile">
    <!-- timestamp of the project -->

    <!-- Directory structure of the project -->
    <property name="web.dir" value="${basedir}/WebRoot"/>
	<property name="webapp.name" value="beluga"/>
	<property name="webapp.war" value="${webapp.name}.war"/>
    <property name="data.dir" value="${basedir}/data"/>
    <property name="build.dir" value="${web.dir}/WEB-INF/classes"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="api.dir" value="${dist.dir}/api"/>
    <property name="lib.dir" value="${web.dir}/WEB-INF/lib"/>
    <property name="local.lib.dir" value="${basedir}/locallib"/>
    <!-- Application Name -->
    <property file="${src.dir}/database.properties"/>
    
    
    <!-- Default options for code-generation, compiling and junit-testing -->
    <property name="javac.debug" value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.source.encoding" value="UTF-8"/>
    <!-- build.compiler - seems to be issues using jikes and JDK 1.4 is just as fast-->
    <property name="junit.fork" value="true"/>
	<property name="junit.maxmemory" value="512m"/>
	
    <property name="junit.showoutput" value="true"/>
    <property name="xdoclet.force" value="false"/>
    
    <path id="lib.classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <path location="${build.dir}"/>        
    </path>
    <path id="local.lib.classpath">
    	<fileset dir="${local.lib.dir}" includes="*.jar"/>
    	<path refid="lib.classpath"/>
    </path>



	
    <target name="init" description="defines custom tasks, create target directories">
			  <!-- Taskdefs -->
        <!--<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib.jar}"/> -->
       
        <tstamp/>
        <tstamp><format property="copyright.year" pattern="yyyy"/></tstamp>
        <tstamp><format property="now.date" pattern="yyyyMMdd_HHmm"/></tstamp>
        <mkdir dir="${build.dir}"/>
    
    </target>
    
    <!-- Remove classes directory for clean build -->
    <target name="clean" description="Removes build artifacts">
    	<!--  build.dir delete  comment-put (non compile.compiled-class use. )
    	<delete>
    		<fileset dir="${build.dir}" includes="**/*"/>
    	</delete>
    	-->
        <delete dir="${dist.dir}"/>
    </target>
	 <target name="clean_hbmxml" description="clean_hbmxml">
	    	<delete>
	    		<fileset dir="${basedir}/resources/hbmxml" includes="**/*.xml"/>
	    	</delete>
	    </target>
	

    <!-- Compile -->
    <target name="compile" depends="init" description="Compile the src">
        <javac srcdir="${src.dir}" 
        	fork="true" memoryinitialsize="256m" memorymaximumsize="1024m" source="1.6"
            destdir="${build.dir}" debug="${compile.debug}"
            deprecation="${compile.deprecation}" 
            encoding="${compile.source.encoding}"
            classpathref="lib.classpath">
        	<compilerarg  value="-Xlint:none" />
        	
        </javac>
        <!-- Copy .properties/.xml files in src tree to build -->
        <copy todir="${build.dir}/">
            <fileset dir="${src.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>
    
    <!-- =================================================================== -->
    <!-- The "hibernatedoclet" target generates Hibernate mapping files      -->
    <!-- based on XDoclet marked-up Plain Old Java Object (POJO)             -->
    <!-- =================================================================== -->
    <target name="hibernatedoclet" depends="clean_hbmxml,compile"
        description="Generate Hibernate mapping files">

        <taskdef name="hibernatedoclet"
            classname="xdoclet.modules.hibernate.HibernateDocletTask"
            classpathref="local.lib.classpath"/>
        
        <!-- generate hibernate files -->
        <hibernatedoclet destdir="${basedir}/resources/hbmxml"
            excludedtags="@version,@author" addedtags="@xdoclet-generated at ${TODAY}"
            force="${xdoclet.force}">
            <fileset dir="${basedir}/src" includes="**/domain/*.java"/>
            <hibernate validatexml="true" version="3.0"/>
        </hibernatedoclet>
    </target>

    <!-- =================================================================== -->
    <!-- The "db-init" target generates the database schema and creates   --> 
    <!-- tables based on the mapping files                                   -->
    <!-- =================================================================== -->
    <target name="db-init" depends="compile"
        description="creates database tables">
        <taskdef name="schemaexport"
            classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
             classpathref="local.lib.classpath"/>

        <schemaexport quiet="no" text="no" drop="no" delimiter=";" 
            properties="${src.dir}/database.properties" output="create-tables.sql">
            <fileset dir="${basedir}/resources/hbmxml" includes="**/*.hbm.xml"/>
        </schemaexport>
    </target>

    <target name="db-export" depends="compile"
        description="Exports the current data in the database">
        <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="local.lib.classpath"/>
        <dbunit driver="${hibernate.connection.driver_class}" url="${hibernate.connection.url}"
            userid="${hibernate.connection.username}" password="${hibernate.connection.password}">
            <export dest="db-export" format="csv"/>
        </dbunit>
    </target>

    <target name="db-load" depends="compile"
        description="Loads the database with system data">
        <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="local.lib.classpath"/>
    	
    	

    	<!-- ===auto set property by database.type(src/database.properties)=== -->
                <!--
                 <property name="operation_delete" value="DELETE_ALL"/>
                 <property name="operation" value="MSSQL_INSERT"/>
                 <property name="operation" value="CLEAN_INSERT"/>
        --> 
    	<echo>=====use rdb : ${database.type}.=====</echo>
    	
        <condition property="operation" value="CLEAN_INSERT">
               <equals arg1="${database.type}" arg2="postgresql" casesensitive="false" trim="true"/>
        </condition>
        <condition property="operation" value="CLEAN_INSERT">
               <equals arg1="${database.type}" arg2="mysql" casesensitive="false" trim="true">
                </equals>       
        </condition>
        <condition property="operation_delete" value="DELETE_ALL">
               <equals arg1="${database.type}" arg2="sqlserver" casesensitive="false" trim="true"/>
        </condition>
        <condition property="operation" value="MSSQL_INSERT">
               <equals arg1="${database.type}" arg2="sqlserver" casesensitive="false" trim="true"/>
        </condition>


        <property name="file-part1"     value="db-export"     />
    	
        <dbunit driver="${hibernate.connection.driver_class}"
            supportBatchStatement="false" url="${hibernate.connection.url}"
            userid="${hibernate.connection.username}" password="${hibernate.connection.password}" schema="${database.schema}">

        	<operation type="${operation}" src="${file-part1}"     format="csv"/>
     
        </dbunit>
    	
    </target>

	<!--
	<target name="db-load-sample" description="Loads the database with additional sample data" >
		<taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="local.lib.classpath"/>
		<echo>==== Loads the database with additional sample data ====</echo>
		<condition property="operation" value="INSERT">
			<equals arg1="${database.type}" arg2="postgresql" casesensitive="false" trim="true"/>
		</condition>
		<condition property="operation" value="INSERT">
			<equals arg1="${database.type}" arg2="oracle" casesensitive="false" trim="true"/>
		</condition>
		<condition property="operation" value="MSSQL_INSERT">
			<equals arg1="${database.type}" arg2="sqlserver" casesensitive="false" trim="true"/>
		</condition>
		<property name="sample1" value="${data.dir}/sql/sample-data-part1.xls"/>
		<property name="sample2" value="${data.dir}/sql/sample-data-part2.xls"/>
		<property name="sample3" value="${data.dir}/sql/sample-data-part3.xls"/>
		<property name="sample4" value="${data.dir}/sql/sample-data-part4.xls"/>
		<dbunit driver="${hibernate.connection.driver_class}" supportBatchStatement="false"
				url="${hibernate.connection.url}" userid="${hibernate.connection.username}"
				password="${hibernate.connection.password}" schema="${database.schema}">
			<operation type="${operation}" src="${sample1}" format="xls"/>
			<operation type="${operation}" src="${sample2}" format="xls"/>
			<operation type="${operation}" src="${sample3}" format="xls"/>
			<operation type="${operation}" src="${sample4}" format="xls"/>
		</dbunit>
		<java classname="jp.co.softbrain.bpm2.tools.initdb.DBSequenceAdjuster" fork="yes">
			<arg line="${data.dir}/sql/check_db.xls"/>
			<arg line="${database.schema}"/>
			<arg line="${database.type}"/>
			<classpath>
				<path refid="local.lib.classpath"/>
			</classpath>
		</java>
	</target>

	<target name="adjust sequence" depends="compile"
	        description="adjust the database's sequence">	        
	        <java classname="jp.co.softbrain.bpm2.tools.initdb.DBSequenceAdjuster" fork="yes">
	            <arg line="${data.dir}/sql/check_db.xls"/>
	        	<arg line="${database.schema}"/>
	        	<arg line="${database.type}"/>
	            <classpath>
	                <path refid="local.lib.classpath"/>
	            </classpath>
	        </java>
	    </target>
	
	<target name="insert_license_function_check_data" depends="compile"
		        description="insert license-function check data">	        
				<java classname="jp.co.softbrain.bpm2.tools.initdb.LicenseFunctionDataUtils" fork="yes">
		    		<classpath>
		    		      <path refid="local.lib.classpath"/>
		    		</classpath>
		    	</java>
		    </target>
    
   
    <target name="create_tables_for_quartz"
        description="Create tables for background Quartz Shceduler ">
        <sql driver="${hibernate.connection.driver_class}" url="${hibernate.connection.url}"
            userid="${hibernate.connection.username}" password="${hibernate.connection.password}"        	
            onerror="continue" autocommit="true">
		  			<transaction  src="${basedir}/qrtz/tables_${database.type}.sql"/>
            <classpath>
                <path refid="local.lib.classpath"/>
            </classpath>
			</sql>
    </target>

    
     <target name="webdoclet" depends="compile"
        description="Generate JSP TLD and other web artifacts">
        <taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask" classpathref="local.lib.classpath"/>
        <webdoclet destdir="${web.dir}/lib/tld" force="${xdoclet.force}"  excludedtags="@version,@author" verbose="true">
            <fileset dir="${src.dir}">
            	<include name="jp/co/softbrain/bpm2/core/taglib/**/*.java"/>
            	<include name="jp/co/softbrain/bpm2/module/taglib/**/*.java"/>
            	<include name="jp/co/softbrain/bpm2/support/taglib/**/*.java"/>
            </fileset>
            <jsptaglib validateXML="true"
                description="Custom tag library for this application" jspversion="2.0"
                shortName="bpm2" filename="bpm2.tld"/>
            <springvalidationxml/>
        </webdoclet>
    </target>
    
	<target name="setup" depends="init, db-init, db-load"
		description="setup env"/>
	-->
	<target name="one-click" depends="hibernatedoclet, db-init, db-load"
			description="一键搞定"/>

    <target name="package-web" depends="compile" description="Package WAR">
    	<mkdir dir="${dist.dir}"/>
        <war destfile="${dist.dir}/${webapp.war}"
            webxml="${web.dir}/WEB-INF/web.xml" compress="true" duplicate="preserve">
            <manifest>
              <attribute name="Built-By" value="fuxiang"/>
              <attribute name="Implementation-Version" value="_b_${now.date}"/>
              <attribute name="Implementation-Vendor-Id" value="com.haina"/>
              <attribute name="Implementation-Title" value="${webapp.name}"/>

            </manifest>
            <fileset dir="${web.dir}">
            	<exclude name="**/web.xml"/>
                <exclude name="**/bak/**"/>
             </fileset>
        </war>
    </target>

    <!-- =================================================================== -->
    <!--            Creates release (binary) distribution    for tomcat5.5                -->
    <!-- =================================================================== -->
    <!--target name="bin" depends="clean,setup-db, package-web" -->
    <target name="bin" depends="clean, package-web"
        description="creates zip file with war, jdbc drivers, and XML file">

		<!--  added for bin deployment automatically -->
        <copy tofile="${dist.dir}/build-tomcat55.xml"
            file="${data.dir}/deploy/build.xml">
        </copy>
        
        <!-- Copy tomcat-context.xml file to webapp.name.xml so it's friendlier -->
        <copy tofile="${dist.dir}/conf/${webapp.name}.xml"
            file="${data.dir}/conf/tomcat-context.xml">
        </copy>
        
        <propertyfile comment="Bin deployment build.properties. Attention: if you modify the parameter valule of database, you have to modify the according configuration files in the war file."
            file="${dist.dir}/build.properties">
            <entry key="webapp.name" value="${webapp.name}"/>
            <entry key="webapp.version" value="${webapp.version}"/>
            <entry key="webapp.war" value="${webapp.name}.war"/>
            <entry key="tomcat.server" value="${tomcat.server}"/>
            <entry key="tomcat.manager.url" value="${tomcat.manager.url}"/>
            <entry key="tomcat.username" value="${tomcat.username}"/>
            <entry key="tomcat.password" value="${tomcat.password}"/>
            <entry key="hibernate.connection.driver_class" value="${hibernate.connection.driver_class}"/>
            <entry key="hibernate.connection.url" value="${hibernate.connection.url}"/>
            <entry key="database.schema" value="${database.schema}"/>
            <entry key="hibernate.connection.username" value="${hibernate.connection.username}"/>
        	<entry key="hibernate.connection.password" value="${hibernate.connection.password}"/>
        	<entry key="database.type" value="${database.type}"/>
        	            
       </propertyfile>
    	 <copy todir="${dist.dir}/data/sql/">
    	    <fileset dir="${data.dir}/sql/" includes="*.xls" casesensitive="false" />
    	 </copy>
        <copy todir="${dist.dir}/data/sql/" file="create-tables.sql"/>
        <copy todir="${dist.dir}/data/sql/" file="${data.dir}/qrtz/tables_${database.type}.sql"/>
        

        
        <!-- Remove version number from WAR file -->
        <move file="${dist.dir}/${webapp.war}"
            tofile="${dist.dir}/${webapp.name}-${webapp.version}.war"/>
        
        <!-- Copy JDBC Driver -->
        <copy todir="${dist.dir}/lib/">
          <fileset dir="${web.dir}/WEB-INF/lib/" includes="_jdbc_*.jar" casesensitive="false" />
        </copy>

        <!-- Copy servletApi-->
        <copy todir="${dist.dir}/lib/">
            <fileset dir="${tomcat.lib.dir}" includes="*.jar"/>
         </copy>
    	
        <!-- Copy poi-->
        <copy todir="${dist.dir}/lib/">
            <fileset dir="${local.lib.dir}" includes="poi*.jar" casesensitive="false" />
         </copy>
        <!-- Copy dbunit-->
        <copy todir="${dist.dir}/lib/">
            <fileset dir="${local.lib.dir}" includes="*dbunit*.jar" casesensitive="false" />
         </copy>
        
        <jar destfile="${dist.dir}/lib/${webapp.name}-dao.jar">
            <manifest>
                <attribute name="Class-Path" value="${webapp.name}-dao.jar"/>

            	<attribute name="Built-By" value="${user.name.dev}"/>
                <attribute name="Implementation-Version" value="${webapp.version},_b_${now.date}"/>
                <attribute name="Implementation-Vendor-Id" value="jp.co.softbrain"/>
                <attribute name="Implementation-Vendor" value="${user.name.saler}"/>
                <attribute name="Implementation-Title" value="${webapp.name}"/>

            </manifest>
            <fileset dir="${build.dir}" includes="jp/co/softbrain/bpm2/**/*Dao*.*"/>
            <fileset dir="${build.dir}" includes="jp/co/softbrain/bpm2/**/*DaoHibernate.*"/>
        </jar>

        <copy todir="${dist.dir}/images" file="${data.dir}/images/ant_logo_large.gif"/>

        <!-- Create the zip and tar.gz files -->
        <property name="archive.name" value="${webapp.name}-${webapp.version}-bin"/>
        <property name="archive.target" value="${dist.dir}/${archive.name}"/>
        <delete file="${archive.target}.zip"/>
        <zip zipfile="${archive.target}.zip">
            <zipfileset prefix="${webapp.name}-${webapp.version}"
                dir="${dist.dir}">
                <patternset id="binfiles">
                    <include name="**"/>
                    <exclude name="${archive.target}.zip"/>
                </patternset>
            </zipfileset>
        </zip>
    </target>

    <!-- =================================================================== -->
    <!--            Creates release (binary) distribution                    -->
    <!-- =================================================================== -->
    <target name="testbin" depends="bin" description="">
        <unzip src="${archive.target}.zip" dest="${dist.dir}/test"/>
        
        <ant antfile="build.xml" dir="${dist.dir}/test/${webapp.name}-${webapp.version}"
        	inheritAll="false" inheritRefs="false"/>
		<delete dir="${dist.dir}/test/"/>
    </target>

    
    <!-- =================================================================== -->
    <!--            Create Oracle User for database            -->
    <!-- =================================================================== -->
    <target name="prepare_oracle_user"
        description="Create tables for background Quartz Shceduler ">
        <sql driver="${hibernate.connection.driver_class}" url="${hibernate.connection.url}"
            userid="system" password="Bpm2ora-pss"
            onerror="continue" autocommit="true"
            classpathref="lib.classpath">
  			<transaction>
  				drop user ${hibernate.connection.username} cascade;
  				create user ${hibernate.connection.username} identified by ${hibernate.connection.password} default tablespace users temporary tablespace temp;
				grant connect,resource to ${hibernate.connection.username};
  			</transaction>
		</sql>
    </target>
    
    <!-- =================================================================== -->
    <!-- Create JavaDoc Documentation                                        -->
    <!-- =================================================================== -->
    <!-- Utilities -->
    <patternset id="java.files.pattern" includes="**/*.java"/>
    <target name="javadoc"  depends="java2html"
        description="Generate JavaDoc API docs">
        <javadoc 
        	maxmemory="480m"
            destdir="${api.dir}"
            encoding="UTF-8"
            author="true"
            version="true"
            windowtitle="${webapp.name} api"
            doctitle="&lt;h1&gt;${webapp.name} javadocs for
                version ${webapp.version}&lt;/h1&gt;"
            bottom="Copyright &#169; 2002-${copyright.year}"
            stylesheetfile="${api.dir}/stylesheet.css">
			
						<packageset dir="${src.dir}"/>
            
            <classpath refid="local.lib.classpath"/>

            <!-- XDoclet Tags -->
            <tag name="hibernate.class" scope="all" description="Class:"/>
            <tag name="hibernate.id" scope="all" description="Id:"/>
            <tag name="hibernate.property" scope="all" description="Property:"/>
            
            <!-- Application frameworks -->
            <link href="http://static.springframework.org/spring/docs/2.0.x/api/"/>
            <link href="http://www.hibernate.org/hib_docs/api"/>
            <!-- SDKs -->
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
            <link href="http://www.hibernate.org/hib_docs/v3/api/"/>
        </javadoc>
    </target>
    <!-- =================================================================== -->
    <!-- Create HTML versions of the Java code in this project               -->
    <!-- =================================================================== -->
    <target name="java2html" depends="hibernatedoclet"
        description="creates HTML pages of code for online viewing">
        <taskdef name="java2html" classname="com.java2html.Java2HTMLTask"
            classpathref="local.lib.classpath"/>

        <java2html
            destination="${api.dir}">
            <fileset dir="${src.dir}">
                <patternset refid="java.files.pattern"/>
            </fileset>
        </java2html>
    </target>
    
    <!-- =================================================================== -->
    <!--     Load the database except the table address (just for test)      -->
    <!-- =================================================================== -->
    <target name="db-load-test" depends="compile"
        description="Loads the database with sample data">
        <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="local.lib.classpath"/>  
    	
        <!-- ===auto set property by database.type(src/database.properties)=== -->
                 <!--
                  <property name="operation" value="MSSQL_INSERT"/>
                  <property name="operation" value="CLEAN_INSERT"/>
         --> 
         <echo>=====use rdb : ${database.type}.=====</echo>
         
         <condition property="operation" value="INSERT">
                <equals arg1="${database.type}" arg2="postgresql" casesensitive="false" trim="true"/>
         </condition>
         <condition property="operation" value="INSERT">
                <equals arg1="${database.type}" arg2="oracle" casesensitive="false" trim="true"/>     
         </condition>
         <condition property="operation" value="MSSQL_INSERT">
                <equals arg1="${database.type}" arg2="sqlserver" casesensitive="false" trim="true"/>
         </condition>


		<property name="file-test" value="${data.dir}/sql/sample-data-employee.xls"/>
		<!--
        <property name="file-part1" value="${data.dir}/sql/sample-data-part1.xls"/>
    	<property name="file-part2" value="${data.dir}/sql/sample-data-part2.xls"/>
		<property name="file-part3" value="${data.dir}/sql/sample-data-part3.xls"/>
    	<property name="file-part4" value="${data.dir}/sql/sample-data-part4.xls"/>        
        -->
        <dbunit driver="${hibernate.connection.driver_class}"
            supportBatchStatement="false" url="${hibernate.connection.url}"
            userid="${hibernate.connection.username}" password="${hibernate.connection.password}" schema="${database.schema}">
       <operation type="${operation}" src="${file-test}" format="xls"/> 
				<!--
			<operation type="${operation}" src="${file-part1}" format="xls"/>
        	<operation type="${operation}" src="${file-part2}" format="xls"/>
			<operation type="${operation}" src="${file-part3}" format="xls"/>
        	<operation type="${operation}" src="${file-part4}" format="xls"/>  
			   -->         
        </dbunit>       
    </target>
	
	
	

    <!-- =================================================================== -->
    <!-- db-load-default                                                                                  -->
    <!-- =================================================================== -->
	 <!--            ========now not use .but Pls dont del. ========
	<target name="db-load-default" depends="compile"
	        description="Loads the database with sample data">
	        <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="local.lib.classpath"/>

	        <property name="operation" value="CLEAN_INSERT"/>
	        <property name="file" value="${data.dir}/sql/sample-data-default.xls"/>
	        
	        <dbunit driver="${hibernate.connection.driver_class}"
	            supportBatchStatement="false" url="${hibernate.connection.url}"
	            userid="${hibernate.connection.username}" password="${hibernate.connection.password}">
	            <operation type="${operation}" src="${file}" format="xls"/>
	        </dbunit>	        
	</target>
	   -->
    <!-- =================================================================== -->
    <!-- db-load-personal                                                                                 -->
    <!-- =================================================================== -->
	<!--            ========now not use .but Pls dont del. ========
	<target name="db-load-personal" depends="compile"
		        description="Loads the database with sample data">
		        <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="local.lib.classpath"/>

		        <property name="operation" value="CLEAN_INSERT"/>
		        <property name="file" value="${data.dir}/sql/sample-data-personal.xls"/>
		        
		        <dbunit driver="${hibernate.connection.driver_class}"
		            supportBatchStatement="false" url="${hibernate.connection.url}"
		            userid="${hibernate.connection.username}" password="${hibernate.connection.password}">
		            <operation type="${operation}" src="${file}" format="xls"/>
		        </dbunit>	        
	</target>
	-->
</project>
